package tg_bot

import (
	"fmt"
	"log"

	tg "github.com/Syfaro/telegram-bot-api"
)

type TgBot struct {
	bot    *tg.BotAPI
	keyboard  tg.InlineKeyboardMarkup
}

func NewBot(botToken string) (*TgBot, error) {
	bot, err := tg.NewBotAPI(botToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot API: %w", err)
	}

	return &TgBot{
		bot: bot,
		keyboard: tg.NewInlineKeyboardMarkup(
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("üé¢", "–ü–∞—Ä–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π"),
				tg.NewInlineKeyboardButtonData("üé≥", "–ë–æ—É–ª–∏–Ω–≥"),
				tg.NewInlineKeyboardButtonData("üé¨", "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä"),
				tg.NewInlineKeyboardButtonData("üçΩ", "–ö–∞—Ñ–µ"),
			),
		),
		
	}, nil
}

func (bot *TgBot) RunBot() error {

	upd := tg.NewUpdate(0)
	upd.Timeout = 60

	updates, err := bot.bot.GetUpdatesChan(upd)
	if err != nil {
		return fmt.Errorf("failed to create channel for updates: %w", err)
	}

	for upd := range updates {
		if upd.Message == nil && upd.CallbackQuery != nil {
			msg := tg.NewMessage(upd.CallbackQuery.Message.Chat.ID, fmt.Sprintf("–í—ã –≤—ã–±—Ä–∞–ª–∏: %s! üòâ", upd.CallbackQuery.Data))
			msg.ReplyMarkup = NewKeyboard(upd.CallbackQuery.Data)
			_, err := bot.bot.Send(msg)
			if err != nil {
				log.Fatalf("failed to send 'button' msg: %s", err.Error())
			}

			continue
		}

		if upd.Message != nil {
			switch upd.Message.Text {
			case "/start":
				msg := tg.NewMessage(upd.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! üòÑ\n\n–Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!\n\n–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ, –∫—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å—Ö–æ–¥–∏—Ç—å —Å –¥—Ä—É–≥–æ–º!")
				msg.ReplyMarkup = bot.keyboard
				_, err := bot.bot.Send(msg)
				if err != nil {
					return fmt.Errorf("failed to send 'start' msg: %w", err)
				}

			default:
				msg := tg.NewMessage(upd.Message.Chat.ID, "–Ø –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:(")
				_, err := bot.bot.Send(msg)
				if err != nil {
					log.Fatalf("failed to send 'default' msg: %s", err.Error())
				}
			}
		}
	}
	return nil
}
